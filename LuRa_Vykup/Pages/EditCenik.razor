@inject CenikyController CenikyController
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager
@inject PreloadService Preload
@inject ToastService ToastService

@page "/Dodavatele/Cenik/Edit/{Id:int}"

<h5>Editace ceníku</h5>

<EditForm Model="@Cenik" OnValidSubmit="@UpdateCenik">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" @bind="Cenik.Id" />

    <div class="row g-1 g-xxl-3">
            <div class="col col-xxl-2">
                <div class="form-floating mb-2">
                    <InputText @bind-Value="Cenik.Nazev" id="cenikNazev" class="form-control" />
                    <label>Název</label>
                </div>
            </div>
            <div class="col col-xxl-2">
                <div class="form-floating mb-2">
                    <InputSelect id="mena" @bind-Value="Cenik.Mena" class="form-select">
                        <option disabled value="">Vyber ceník</option>
                        @foreach (var item in Enum.GetValues(typeof(Models.Mena)))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                    <label for="cena">Měna</label>

                </div>
            </div>

            

        </div>
        <div class="row g-1 g-xxl-3">
            <div class="col col-xxl-2">
                <div class="form-floating mb-2">
                    <InputNumber @bind-Value="Cenik.JelenI" class="form-control" />
                    <label>Jelen kat. I</label>
                </div>          
                <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.JelenII" />
                    <label>Jelen kat. II</label>
                </div>          
                <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.JelenIII" />
                    <label>Jelen kat. III</label>
                </div>          
            </div>              
            <div class="col col-xxl-2">
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.SrnciI" />
                    <label>Srnec kat. I</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.SrnciII" />
                    <label>Srnec kat. II</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.SrnciIII" />
                    <label>Srnec kat. III</label>
                </div>
            </div>

            <div class="col col-xxl-2">
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.MuflonI" />
                    <label>Muflon kat. I</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.MuflonII" />
                    <label>Muflon kat. II</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.MuflonIII" />
                    <label>Muflon kat. III</label>
                </div>
            </div>
        </div>
    <div class="row g-1 g-xxl-3">

            <div class="col col-xxl-2">
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.DanekI" />
                    <label>Daněk kat. I</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.DanekII" />
                    <label>Daněk kat. II</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.DanekIII" />
                    <label>Daněk kat. III</label>
                </div>
            </div>
            <div class="col col-xxl-2">
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.DivocakI" />
                    <label>Divočák kat. I</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.DivocakII" />
                    <label>Divočák kat. II</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.DivocakIII" />
                    <label>Divočák kat. III</label>
                </div>
            </div>

            <div class="col col-xxl-2">
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.SikaI" />
                    <label>Sika kat. I</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.SikaII" />
                    <label>Sika kat. II</label>
                </div>
               <div class="form-floating mb-2">
                    <InputNumber class="form-control" @bind-Value="Cenik.SikaIII" />
                    <label>Sika kat. III</label>
                </div>
            </div>

        </div>

        <ConfirmDialog @ref="dialog" />
        <!-- Ostatní vstupy formuláře -->

        <button type="submit" class="btn btn-primary">Uložit</button>
        <a href="/Dodavatele/Cenik" class="btn btn-secondary">Zpět</a>
        <button type="button" class="btn btn-danger" @onclick="DeleteDialog">Vymazat</button>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private ConfirmDialog dialog = default!;
    private Models.Ceniky Cenik { get; set; } = new();
    private string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Zkontroluje prihlaseni, obsahuje metody GetUserId a GetUserName, udelal jsme tridu pro lepsi logiku
        LoginServices login = new LoginServices(AuthenticationStateTask);
        UserId = login.GetUserId((fc) => { if (fc) NavigationManager.NavigateTo("/identity/account/login"); });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Cenik = await CenikyController.GetCenik(Id, UserId);

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }



    private async Task UpdateCenik()
    {
        var result = await CenikyController.UpdateCenikAsync(Id, UserId, Cenik);
        if (result)
        {
            MyNavigate();
            ToastService.Notify(new(ToastType.Success, title: $"Aktualizace ceníku {Cenik.Nazev}", message: $"Ceny byly aktualizovány."));
        }
        else
            ToastService.Notify(new(ToastType.Danger, title: $"Aktualizace ceníku {Cenik.Nazev}", message: $"Ceny nebyly aktualizovány."));
    }

    public void MyNavigate()
    {
        NavigationManager.NavigateTo($"/Dodavatele/Cenik");
    }

    private async Task DeleteDialog()
    {
        var confirmation = await dialog.ShowAsync(
            title: "Smazání ceníku",
            message1: "Vážně chcete ceník smazat?",
            confirmDialogOptions: new ConfirmDialogOptions()
                {
                    YesButtonColor = ButtonColor.Danger,
                    YesButtonText = "Smazat",
                    NoButtonColor = ButtonColor.Success,
                    NoButtonText = "Zpět"
                }
        );

        if (confirmation)
        {
            bool isUse = await CenikyController.IsCenikInUse(Id, UserId);
            if (isUse)
            {
                ToastService.Notify(new(ToastType.Danger, title: $"Smazání ceníku - {Cenik.Nazev}", message: $"Ceník nelze smazat, jelikož je přiřazen k dodavateli."));
                return;
            }

            bool success = await CenikyController.DeleteCenikAsync(Id, UserId);
            if (success)
            {
                MyNavigate();
                ToastService.Notify(new(ToastType.Success, title: $"Smazání ceníku {Cenik.Nazev}", message: $"Ceník byl v pořádku smazán."));
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, title: $"Smazání ceníku {Cenik.Nazev}", message: $"Ceník se nepodařilo smazat."));
            }
        }
    }
}