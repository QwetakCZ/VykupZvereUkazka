@using QuestPDF.Fluent;
@using QuestPDF.Helpers;
@using QuestPDF.Infrastructure;

@inject PreloadService Preload
@inject ToastService ToastService
@inject DLController DLController
@inject VykupController VykupController
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager
@inject CreatePdfFromDL _createdPdfFromDL //injektuje servis pro pomocne metody
@inject IJSRuntime JS

@using Append.Blazor.Printing
@using System.Diagnostics
@inject IPrintingService PrintingService

@page "/Dodaci_listy/Seznam"
<div class="row g-2 mb-2">
    <div class="col col-lg-auto">
        <Button class="btn btn-primary" @onclick="LoadNewDlNummer">Nový dodací list</Button>
    </div>
    <div class="col col-lg-auto">
        <InputSelect @bind-Value="DodavatelId" class="form-select">
            <option value="-1">Vyber dodavatele</option>
            @foreach (var item in DodavateleNazvy)
            {
                <option value="@item.Id">@item.Nazev</option>
            }
        </InputSelect>
    </div>
</div>

@HelperServices.GetGridFix()

<div class="row">
    <div class="col-12">
        <Grid @ref="grid"
              TItem="DodaciListSeznamViewModel"
              Class="table table-hover table-bordered table-striped table-sm"
              DataProvider="DataLoad"
              FiltersRowCssClass="bg-primary text-white bg-opacity-25 border-bottom-0 grid-border"
              HeaderRowCssClass="bg-primary text-white border-bottom-0 bg-opacity-50"
              AllowFiltering="true"
              AllowRowClick="true"
              OnRowClick="ClickMenu"
              Responsive="true"
              EmptyText="Žádná data"
              AllowPaging="true"
              PageSize="15"
              PageSizeSelectorVisible="true"
              PageSizeSelectorItems="@(new int[] { 10,15,20,50,100 })"
              PaginationItemsTextFormat="{0} - {1} z {2} položek"
              ItemsPerPageText="Počet položek na stránku"
              FiltersTranslationProvider="HelperServices.PrekladFilter">

            <GridColumn TItem="DodaciListSeznamViewModel" HeaderText="Číslo" PropertyName="Cislo">
                @context.Cislo
            </GridColumn>
            <GridColumn TItem="DodaciListSeznamViewModel" HeaderText="Datum vystavení" PropertyName="Datum">
                @context.Datum
            </GridColumn>
            <GridColumn TItem="DodaciListSeznamViewModel" HeaderText="Dodavatel" PropertyName="Dodavatel">
                @context.Dodavatel
            </GridColumn>
            <GridColumn TItem="DodaciListSeznamViewModel" HeaderText="Ceník" PropertyName="Cenik">
                @context.Cenik (@context.Mena)
            </GridColumn>

        </Grid>
    </div>
</div>

<Offcanvas @ref="offcanvas"
           title="Možnosti"
           Placement="Placement.Top">
    <BodyTemplate>
        <div class="row">
            <div class="col-12 text-center fs-5">
                <p>Vyberte jednu z možností pro doklad @OffCanvasData.Cislo</p>
            </div>
            <div class="mt-3 text-center">
                <a class="btn btn-primary px-3 mx-2" href="/Dodaci_listy/Editovat/@OffCanvasData.Id">Editace</a>
                <button class="btn btn-success px-3 mx-2 disabled">Tisk dokladu</button>
            </div>

        </div>
    </BodyTemplate>
</Offcanvas>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string? UserId { get; set; }
    private List<DodaciListSeznamViewModel> DLList { get; set; }
    public string LastDLNummer { get; set; }
    private List<(string Nazev, int Id)> DodavateleNazvy { get; set; } = new();
    private int DodavatelId { get; set; }
    BlazorBootstrap.Grid<DodaciListSeznamViewModel> grid = default!;
    private Offcanvas offcanvas = default!;
    private DodaciListSeznamViewModel OffCanvasData { get; set; } = new(new DodaciListy());

    private async Task ClickMenu(GridRowEventArgs<DodaciListSeznamViewModel> args)
    {
        OffCanvasData = args.Item;
        await offcanvas.ShowAsync();
    }

    private async Task<GridDataProviderResult<DodaciListSeznamViewModel>> DataLoad(GridDataProviderRequest<DodaciListSeznamViewModel> request)
    {
        if (DLList is null)
        {
            var data = await DLController.GetDLList(UserId);
            DLList = data.Select(x => new DodaciListSeznamViewModel(x)).ToList();
            await NactiDodavatele();
            StateHasChanged();
        }
        Preload.Hide();
        return await Task.FromResult(request.ApplyTo(DLList));
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }

       await base.OnAfterRenderAsync(firstRender);
    }


    protected override async Task OnInitializedAsync()
    {
        // Zkontroluje prihlaseni, obsahuje metody GetUserId a GetUserName, udelal jsme tridu pro lepsi logiku
        LoginServices login = new LoginServices(AuthenticationStateTask);
        UserId = login.GetUserId((fc) => { if (fc) NavigationManager.NavigateTo("/identity/account/login"); });
        DodavatelId = -1;
        Preload.Show();
    }

    private async Task NactiDodavatele()
    {
        DodavateleNazvy = await DLController.GetNazvyDodavatele(UserId);
    }

    private void LoadNewDlNummer()
    {
        if (DodavatelId == -1)
        {
            ToastService.Notify(new(ToastType.Warning, title: "Dodavatel", message: "Vyber dodavatele!"));
            return;
        }

        LastDLNummer = HelperServices.GeneratorDokladu(DLList.OrderByDescending(x => x.Id).Select(x => x.Cislo).FirstOrDefault(), HelperServices.Prefix.DL);
        HelperServices.NewDLNumber = LastDLNummer;
        NavigationManager.NavigateTo("/Dodaci_listy/Novy/" + DodavatelId);
    }

    public async Task Print()
    {
        // var db = await DLController.GetPokladnidokladySeznamDoklad(UserId, OffCanvasData.Id);
        // var _data = db.Select(x => new ExportPokladniDoklady(x)).ToList();

        // var report = new FastReport.Report();
        // report.Load(HelperServices.ReportCesta("report_PD.frx"));
        // report.RegisterData(_data, "Data");
        // report.SetParameterValue("Dodavatel", OffCanvasData.Dodavatel);
        // report.SetParameterValue("DodaciList", OffCanvasData.CisloDokladu);
        // report.SetParameterValue("Datum", OffCanvasData.Datum);
        // report.SetParameterValue("Mena", OffCanvasData.Mena);
        // report.SetParameterValue("Nazev", OffCanvasData.VykupnaNazev);
        // report.SetParameterValue("Ulice", OffCanvasData.VykupnaUlice);
        // report.SetParameterValue("Ico", OffCanvasData.VykupnaIco);
        // report.SetParameterValue("Firma", OffCanvasData.VykupnaFirma);
        // report.Prepare();
        // var pdf = $"report_{OffCanvasData.CisloDokladu}_{OffCanvasData.Id}.pdf";
        // report.Export(new PDFSimpleExport(), HelperServices.ReportExportPDFCesta(pdf));
        // await PrintingService.Print(HelperServices.ReportPrintPDFCesta(pdf), PrintType.Pdf);
        //JS.InvokeVoidAsync("open", outputFileName, "_blank");
    }




}
